{"version":3,"sources":["components/NavMenu.js","components/Layout.js","components/Home.js","components/FetchData.js","components/Counter.js","components/Books/BooksIndex.jsx","components/Books/BooksCreate.jsx","components/Books/BooksEdit.jsx","components/Books/BooksDelete.jsx","App.js","registerServiceWorker.js","index.js"],"names":["NavMenu","props","toggleNavbar","bind","state","collapsed","this","setState","Navbar","className","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","NavLink","Component","displayName","name","Layout","children","Home","href","FetchData","forecasts","loading","populateWeatherData","contents","renderForecastsTable","id","fetch","response","json","data","aria-labelledby","map","forecast","key","date","temperatureC","temperatureF","summary","Counter","currentCount","incrementCounter","aria-live","BooksIndex","books","goCreatePage","editBy","deleteBy","populateBooksDataWithAxiosAsync","book","title","description","created","Date","toLocaleDateString","history","push","renderBooksTable","style","fontStyle","axios","get","then","BooksCreate","handleChangeDescription","event","target","value","handleChangeTitle","handleSubmit","goIndex","e","preventDefault","bookDto","post","result","onSubmit","type","placeholder","onChange","BooksEdit","match","params","put","BooksDelete","console","log","window","confirm","delete","React","App","exact","path","component","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename","URL","process","origin","addEventListener","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5863e6ba.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport './NavMenu.css';\n\nexport class NavMenu extends Component {\n    static displayName = NavMenu.name;\n\n    constructor(props) {\n        super(props);\n\n        this.toggleNavbar = this.toggleNavbar.bind(this);\n        this.state = {\n            collapsed: true\n        };\n    }\n\n    toggleNavbar() {\n        this.setState({\n            collapsed: !this.state.collapsed\n        });\n    }\n\n    render() {\n        return (\n            <header>\n                <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\n                    <Container>\n                        <NavbarBrand tag={Link} to=\"/\">Search</NavbarBrand>\n                        <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n                        <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\n                            <ul className=\"navbar-nav flex-grow\">\n                                <NavItem>\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/counter\">Counter</NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/fetch-data\">Fetch data</NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/Books\">Books</NavLink>\n                                </NavItem>\n                            </ul>\n                        </Collapse>\n                    </Container>\n                </Navbar>\n            </header>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { Container } from 'reactstrap';\nimport { NavMenu } from './NavMenu';\n\nexport class Layout extends Component {\n  static displayName = Layout.name;\n\n  render () {\n    return (\n      <div>\n        <NavMenu />\n        <Container>\n          {this.props.children}\n        </Container>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport class Home extends Component {\n  static displayName = Home.name;\n\n  render () {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <p>Welcome to your new single-page application, built with:</p>\n        <ul>\n          <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\n          <li><a href='https://facebook.github.io/react/'>React</a> for client-side code</li>\n          <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\n        </ul>\n        <p>To help you get started, we have also set up:</p>\n        <ul>\n          <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\n          <li><strong>Development server integration</strong>. In development mode, the development server from <code>create-react-app</code> runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\n          <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration produces minified, efficiently bundled JavaScript files.</li>\n        </ul>\n        <p>The <code>ClientApp</code> subdirectory is a standard React application based on the <code>create-react-app</code> template. If you open a command prompt in that directory, you can run <code>npm</code> commands such as <code>npm test</code> or <code>npm install</code>.</p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport class FetchData extends Component {\n  static displayName = FetchData.name;\n\n  constructor(props) {\n    super(props);\n    this.state = { forecasts: [], loading: true };\n  }\n\n  componentDidMount() {\n    this.populateWeatherData();\n  }\n\n  static renderForecastsTable(forecasts) {\n    return (\n      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Temp. (C)</th>\n            <th>Temp. (F)</th>\n            <th>Summary</th>\n          </tr>\n        </thead>\n        <tbody>\n          {forecasts.map(forecast =>\n            <tr key={forecast.date}>\n              <td>{forecast.date}</td>\n              <td>{forecast.temperatureC}</td>\n              <td>{forecast.temperatureF}</td>\n              <td>{forecast.summary}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n\n  render() {\n    let contents = this.state.loading\n      ? <p><em>Loading...</em></p>\n      : FetchData.renderForecastsTable(this.state.forecasts);\n\n    return (\n      <div>\n        <h1 id=\"tabelLabel\" >Weather forecast</h1>\n        <p>This component demonstrates fetching data from the server.</p>\n        {contents}\n      </div>\n    );\n  }\n\n  async populateWeatherData() {\n    const response = await fetch('weatherforecast');\n    const data = await response.json();\n    this.setState({ forecasts: data, loading: false });\n  }\n}\n","import React, { Component } from 'react';\n\nexport class Counter extends Component {\n  static displayName = Counter.name;\n\n  constructor(props) {\n    super(props);\n    this.state = { currentCount: 0 };\n    this.incrementCounter = this.incrementCounter.bind(this);\n  }\n\n  incrementCounter() {\n    this.setState({\n      currentCount: this.state.currentCount + 1\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Counter</h1>\n\n        <p>This is a simple example of a React component.</p>\n\n        <p aria-live=\"polite\">Current count: <strong>{this.state.currentCount}</strong></p>\n\n        <button className=\"btn btn-primary\" onClick={this.incrementCounter}>Increment</button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nexport class BooksIndex extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            books: [],\n            loading: true\n        };\n\n        this.goCreatePage = this.goCreatePage.bind(this); \n        this.editBy = this.editBy.bind(this);\n        this.deleteBy = this.deleteBy.bind(this); \n    }\n\n    // 페이지가 로드되었을 때 Web API 호출해서 JSON 데이터 가져오기: OnInitialized() \n    componentDidMount() {\n        //this.populateBooksData();\n        //this.populateBooksDataWithAxios();\n        this.populateBooksDataWithAxiosAsync();\n    }\n\n    // 책 리스트 테이블 출력\n    renderBooksTable(books) {\n        return (\n            <table className='table table-striped' aria-labelledby=\"tabelLabel\">\n                <thead>\n                    <tr>\n                        <th>Id</th>\n                        <th>Title</th>\n                        <th>Description</th>\n                        <th>Created</th>\n                        <th>Action, Admin</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {books.map(book =>\n                        <tr key={book.id}>\n                            <td>{book.id}</td>\n                            <td>{book.title}</td>\n                            <td>{book.description}</td>\n                            <td>{book.created ? new Date(book.created).toLocaleDateString() : \"-\" }</td>\n                            <td className=\"text-nowrap\">\n                                <button className=\"btn btn-sm btn-primary\" onClick={() => this.editBy(book.id)}>Edit</button>\n                                &nbsp;\n                                <button className=\"btn btn-sm btn-danger\" onClick={() => this.deleteBy(book.id)}>Delete</button>\n                            </td>\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n        );\n    }\n\n    goCreatePage() {\n        //console.log(\"Create\");\n        const { history } = this.props;\n        history.push('/Books/Create');\n    }\n\n    editBy(id) {\n        //console.log(\"Edit by \" + id);\n        const { history } = this.props;\n        history.push(\"/Books/Edit/\" + id);\n    }\n\n    deleteBy(id) {\n        //console.log(\"Delete by \" + id);\n        const { history } = this.props;\n        history.push(\"/Books/Delete/\" + id);\n    }\n\n    render() {\n        let contents = this.state.loading\n            ? <p><em>Loading....</em></p>\n            : this.renderBooksTable(this.state.books);\n\n        return (\n            <div>\n                <h1>My Books <button onClick={this.goCreatePage} className=\"btn btn-primary\"><span className=\"fa fa-plus\">+</span></button></h1>\n                <h2 style={{ fontStyle: \"italic\" }}>제가 집필한 책입니다.</h2> \n                {contents}\n            </div>\n        );\n    }\n\n    //[!] Web API 호출하는 3가지 모양 \n    //[1] Fetch API \n    async populateBooksData() {\n        const response = await fetch('/api/Books');\n        const data = await response.json();\n        this.setState({ books: data, loading: false });\n    }\n\n    //[2] Axios + Async\n    populateBooksDataWithAxios() {\n        axios.get(\"/api/Books\").then(response => {\n            const data = response.data;\n            this.setState({ books: data, loading: false });\n        });\n    }\n\n    //[3] Axios + Async\n    async populateBooksDataWithAxiosAsync() {\n        const response = await axios.get(\"/api/Books\");\n        const data = response.data;\n        this.setState({ books: data, loading: false });\n    }\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nexport class BooksCreate extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            title: '',\n            description: '',\n            created: null,\n        };\n\n        //[!] 이벤트 바인딩\n        //[1] 함수로 이벤트 처리기 만들고 생성자에서 바인딩\n        this.handleChangeTitle = this.handleChangeTitle.bind(this); \n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.goIndex = this.goIndex.bind(this); \n\n        //[2] 화살표 함수(람다 식)로 이벤트 핸들러 바인딩\n        //this.handleChangeDescription = this.handleChangeDescription.bind(this); \n    }\n\n    //[1] 함수로 이벤트 처리기 만들고 생성자에서 바인딩\n    handleChangeTitle(e) {\n        this.setState({\n            title: e.target.value\n        });\n    }\n\n    goIndex() {\n        const { history } = this.props;\n        history.push(\"/Books\");\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        let bookDto = {\n            title: this.state.title,\n            description: this.state.description,\n        };\n\n        axios.post(\"/api/Books\", bookDto).then(result => {\n            this.goIndex();\n        });\n    }\n\n    //[2] 화살표 함수(람다 식)로 이벤트 핸들러 바인딩\n    handleChangeDescription = (event) => {\n        this.setState({\n            description: event.target.value\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <h3>Create</h3>\n\n                <div className=\"row\">\n                    <div className=\"col-md-8\">\n                        <form onSubmit={this.handleSubmit}>\n                            <div className=\"form-group\">\n                                <label>Title</label>\n                                <input type=\"text\" className=\"form-control\"\n                                    placeholder=\"Enter Title\"\n                                    value={this.state.title}\n                                    onChange={this.handleChangeTitle}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Description</label>\n                                <input type=\"text\" className=\"form-control\"\n                                    placeholder=\"Enter Description\"\n                                    value={this.state.description}\n                                    onChange={this.handleChangeDescription}\n                                />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                                &nbsp;\n                                <button className=\"btn btn-secondary\" onClick={this.goIndex}>List</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nexport class BooksEdit extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            title: '',\n            description: '',\n            created: null,\n        };\n\n        this.handleChangeTitle = this.handleChangeTitle.bind(this);\n        this.handleChangeDescription = this.handleChangeDescription.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.goIndex = this.goIndex.bind(this);\n    }\n\n    componentDidMount() {\n        //[!] id Parameter 받기\n        const { id } = this.props.match.params;\n\n        //[!] id 값에 해당하는 단일 데이터를 Web API로부터 읽어오기\n        axios.get(\"/api/Books/\" + id).then(response => {\n            const data = response.data;\n\n            this.setState({\n                title: data.title,\n                description: data.description,\n                created: data.created\n            });\n        });\n    }\n\n    handleChangeTitle(e) {\n        this.setState({\n            title: e.target.value\n        });\n    }\n    handleChangeDescription(e) {\n        this.setState({\n            description: e.target.value\n        });\n    }\n\n    goIndex() {\n        const { history } = this.props;\n        history.push(\"/Books\");\n    }\n\n    handleSubmit(e) {\n        e.preventDefault(); // 버튼, 링크 등의 고유 기능을 제거하고 React 기능만 사용\n\n        const { id } = this.props.match.params;\n\n        let bookDto = {\n            title: this.state.title,\n            description: this.state.description,\n            created: this.state.created, // Created는 처음 가져온 것 그대로 설정 \n        };\n\n        axios.put(\"/api/Books/\" + id, bookDto).then(result => {\n            this.goIndex();\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <h3>Edit</h3>\n\n                <div className=\"row\">\n                    <div className=\"col-md-8\">\n                        <form onSubmit={this.handleSubmit}>\n                            <div className=\"form-group\">\n                                <label>Title</label>\n                                <input type=\"text\" className=\"form-control\"\n                                    placeholder=\"Enter Title\"\n                                    value={this.state.title}\n                                    onChange={this.handleChangeTitle}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Description</label>\n                                <input type=\"text\" className=\"form-control\"\n                                    placeholder=\"Enter Description\"\n                                    value={this.state.description}\n                                    onChange={this.handleChangeDescription}\n                                />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                                &nbsp;\n                                <button className=\"btn btn-secondary\" onClick={this.goIndex}>Cancel</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport axios from 'axios';\n\nexport class BooksDelete extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            title: '',\n            description: '',\n            created: null,\n        };\n\n        this.handleChangeTitle = this.handleChangeTitle.bind(this);\n        this.handleChangeDescription = this.handleChangeDescription.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.goIndex = this.goIndex.bind(this);\n    }\n\n    componentDidMount() {\n        //[!] id Parameter 받기: 쿼리스트링으로 넘어온 값 받기 \n        const { id } = this.props.match.params;\n\n        //[!] id 값에 해당하는 단일 데이터를 Web API로부터 읽어오기\n        axios.get(\"/api/Books/\" + id).then(response => {\n            const data = response.data;\n\n            this.setState({\n                title: data.title,\n                description: data.description,\n                created: data.created\n            });\n        });\n    }\n\n    componentDidUpdate() {\n        console.log(\"컴포넌트 업데이트\");\n    }\n\n    handleChangeTitle(e) {\n        this.setState({\n            title: e.target.value\n        });\n    }\n\n    handleChangeDescription(e) {\n        this.setState({\n            description: e.target.value\n        });\n    }\n\n    goIndex() {\n        const { history } = this.props;\n        history.push(\"/Books\");\n    }\n\n    // 삭제 버튼 클릭\n    handleSubmit(e) {\n        e.preventDefault();\n\n        if (window.confirm(\"정말로 삭제하시겠습니까?\")) {\n            const { id } = this.props.match.params;\n\n            axios.delete(\"/api/Books/\" + id).then(result => {\n                this.goIndex();\n            });\n        }\n        else {\n            return false; \n        }\n    }\n\n    render() {\n        return (\n            <>\n                <h3>Delete</h3>\n\n                <div className=\"row\">\n                    <div className=\"col-md-8\">\n                        <form onSubmit={this.handleSubmit}>\n                            <div className=\"form-group\">\n                                <label>Title</label>\n                                <input type=\"text\" className=\"form-control\"\n                                    placeholder=\"Enter Title\"\n                                    value={this.state.title}\n                                    onChange={this.handleChangeTitle}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Description</label>\n                                <input type=\"text\" className=\"form-control\"\n                                    placeholder=\"Enter Description\"\n                                    value={this.state.description}\n                                    onChange={this.handleChangeDescription}\n                                />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <button type=\"submit\" className=\"btn btn-danger\">Delete</button>\n                                &nbsp;\n                                <button className=\"btn btn-secondary\" onClick={this.goIndex}>Cancel</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { Route } from 'react-router';\nimport { Layout } from './components/Layout';\nimport { Home } from './components/Home';\nimport { FetchData } from './components/FetchData';\nimport { Counter } from './components/Counter';\n\nimport './custom.css'\n\nimport { BooksIndex } from './components/Books/BooksIndex';\nimport { BooksCreate } from './components/Books/BooksCreate';\nimport { BooksEdit } from './components/Books/BooksEdit';\nimport { BooksDelete } from './components/Books/BooksDelete';\n\nexport default class App extends Component {\n    static displayName = App.name;\n\n    render() {\n        return (\n            <Layout>\n                <Route exact path='/' component={Home} />\n                <Route path='/counter' component={Counter} />\n                <Route path='/fetch-data' component={FetchData} />\n                <Route path={['/Books', '/Books/Index']} component={BooksIndex} exact />\n                <Route path='/Books/Create' component={BooksCreate} exact={true} />\n                <Route path='/Books/Edit/:id' component={BooksEdit} exact />\n                <Route path='/Books/Delete/:id' component={BooksDelete} exact />\n            </Layout>\n        );\n    }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport default function register () {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW (swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker (swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n  <BrowserRouter basename={baseUrl}>\n    <App />\n  </BrowserRouter>,\n  rootElement);\n\nregisterServiceWorker();\n\n"],"sourceRoot":""}